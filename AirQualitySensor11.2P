// This #include statement was automatically added by the Particle IDE.
#include <SHT30.h>
#include <Wire.h>
#include "SensirionSGP30.h"
#include <Adafruit_DHT.h>
SHT30 sensor;
SensirionSGP30 sgp30;

//floats for temperature values
    float temp; // Temperature in Celcius 
    float hum; // Humidity
};


//formula to get accurate humidity reading
uint32_t getAbsoluteHumidity(float temperature, float humidity) {
    // approximation formula from Sensirion SGP30 Driver Integration chapter 3.15
    const float absoluteHumidity = 216.7f * ((humidity / 100.0f) * 6.112f * exp((17.62f * temperature) / (243.12f + temperature)) / (273.15f + temperature)); // [g/m^3]
    const uint32_t absoluteHumidityScaled = static_cast<uint32_t>(1000.0f * absoluteHumidity); // [mg/m^3]
    return absoluteHumidityScaled;
}

void setup() {
  Serial.begin(9600);
  sensor.setAddress(0);
    Particle.variable("hum", humidity);
    Particle.variable("temp", temperature);

  if (! sgp.begin()){
    Serial.println("Sensor not found :(");
    while (1);
  }
  Serial.print("Found SGP30 serial #");
  Serial.print(sgp.serialnumber[0], HEX);
  Serial.print(sgp.serialnumber[1], HEX);
  Serial.println(sgp.serialnumber[2], HEX);
  
}

int counter = 0;
void loop() {

    if(sensor.update()){
        hum = sensor.humidity;
        temp = sensor.temperature;
    }
    
  if (! sgp.IAQmeasure()) {
    Serial.println("Measurement failed");
    return;
  }
  Serial.print("TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");
  Serial.print("eCO2 "); Serial.print(sgp.eCO2); Serial.println(" ppm");
  delay(1000);

  counter++;
  if (counter == 30) {
    counter = 0;

    uint16_t TVOC_base, eCO2_base;
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
      Serial.println("Failed to get baseline readings");
      return;
    }
    Particle.publish("****Baseline values: eCO2: 0x"); Serial.print(eCO2_base, HEX);
    Particle.publish(" & TVOC: 0x"); Serial.println(TVOC_base, HEX);
    Particle.publish("Humidity level: "); Serial.print(humidity); Serial.print("%");
    Particle.publish("Temperature:  "); Serial.print(temperature); Serial.print("C");
  }
}
